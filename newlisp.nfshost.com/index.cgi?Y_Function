<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>



<head>
  <title>newLISP  - Y Function</title>
  <META name="verify-v1" content="uI5QBi0dvEoNnrT+Vrm63toHH4Ep1y6BBR61veuiWKU=" />
  <META http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="icon" href="favicon.ico" type="image/x-icon" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.cgi" />
  <meta name="description"`
      content="newLISP is a general purpose scripting language for developing web applications and programs in general in the domains of artificial intelligence (AI), statistics and machine learning.">
  <meta name="keywords"
      content="lisp,scheme,programming,scripting language,ai,artificial intelligence,statistics,machine learning,distributed and parallel processing,gpl">
  <META name="verify-v1" content="uI5QBi0dvEoNnrT+Vrm63toHH4Ep1y6BBR61veuiWKU=" />
  <style type="text/css" media="screen">
<!--
 
 /* style for top title portion of site */

 .title {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 20px;
   font-weight: 200;
   margin: 0 10%;
   margin-bottom: 3px;
   color: #888;
  background-color: #FFFFFF;
 }

 /* link behaviour in title box */
 .title a {
   background-color: transparent;
   text-decoration: none;
   color: #eee;
   text-decoration: none;
 }

 .title a:hover {
   color: #fff;
   text-decoration: underline;
   background-color: transparent;
 }

 /* the name on top of each page (except the Home page) */

 .pagename {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 18px;
   margin-bottom: 20px;
 }

 /* style of content box where all 
   user text lives 
 */
 .content {
   margin: 0 10%;
   max-width: 900px;
   padding: 10px;
  background-color: #FFFFFF;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";

  -moz-border-radius: 5px;
  -khtml-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
 }

 .content a {
   background-color: transparent;
   text-decoration: none;
   color: #25a;
 }

 .content a:hover {
   padding: 0px;
   color: #FFF;
   text-decoration: none;
   background-color: #888;
 }

 .content a:visited {

 }


 /* style for menu on top */
 .menu {   
   margin-left: 0px;
   margin-right: 0px;
   padding: 1px;
   font-family: Verdana, Arial, Helvetica, sans-serif;
   font-size: 16px;
   line-height: 16px;
   color: #FFF;
   background-color: #369;
 }

 /* links in menu */
 .menu a {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 0px;
   color: #fff;
   text-decoration: none;
 }


 .menu a:hover {
   color: #fff;
   border-bottom: 0px;
   padding: 0px;
   background-color: #888;
   text-decoration: none;
 }

 .menu a:visited {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }

 .menu-bottom {   
   margin: 0 10%;
   max-width: 880px;
   margin-top: 10px;
   padding: 1px;
   font-family: Verdanan, Arial, Helvetica, sans-serif;
   font-size: 15px;
   background-color: #369;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";

  -moz-border-radius: 5px;
  -khtml-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
 }

 /* links in menu-bottom */
 .menu-bottom a {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }


 .menu-bottom a:hover {
   color: #fff;
   border-bottom: 0px;
   padding: 1px;
   background-color: #888;
   text-decoration: none;
 }

 .menu-bottom a:visited {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }

 /* the bottom bar between content box and menu */
 .bottombar {
   font-size: 4px;
   margin: 0 10%;
   padding: 10px;
   padding-top: 2px;
   padding-bottom: 6px;
  background-color: #FFFFFF;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";
 }


 /* where the copyright notice is */
 .footer {
   text-align: center;
   margin: 0 10%;
   max-width: 880px;
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 10px;
   line-height: 12px;
 }


 /* style for whole site except overwritten
     by enclosed tags
 */
 body {
   font-family: Geneva, Helvetica, Verdanan, Arial, sans-serif;
   font-size: 16px;
   line-height: 20px;
   color: #606060;
 }


 /* style for == title == */
 h1 {
   font-family: Helvetica;
   font-size: 32px;
   color: #369;
   font-weight: 100;
 }

 /* style for === title === */
 h2 {
   font-family: Helvetica;
   font-size: 30px;
   font-weight: 100;
   color: #369;
 }

 /* style for ==== title ==== */
 h3 {
   font-size: 20px;
   font-weight: 100;
   color: #369;
   margin-top: 20px;
   padding: 0px;
 }

 /* style for ===== text =====  used for blog title */
 h4 {
   font-size: 18px;
   font-weight: 100;
   color: #777;
   margin: 0px;
   padding: 0px;
}

 /* style for ====== text ======  used for comment title */
 h5 {
   font-size: 12px;
   font-weight: normal;
   color: #a22;
   margin: 3px;
   padding: 0px;
 }

 /* for <small> tag */
 small {
   font-size: 10px;
 }


 /* for the bold tag */
 b {
  color: 999;
 }

 /* for <big> tag, will not work on Netscape v.4 */
 big {
 }

 /* for <p> tag */
 p {
   margin-left: 40px;
   margin-right: 40px;
 }

 /* for <table> tag, these are used when displating the files,changes,referencrs tables */
 table {
   border-width: 1px;
   border-style: solid;
   border-color: #ccc;
   background-color: #ccc;
 }

 /* for table tags <tr> <th> <td> */
 tr, th, td {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 12px;
   background-color: #eee;
 }

 /* for quick table tags with [,] 
     use these (not <table><tr><td>)
     when doing layout with tables
 */
 table.quick {
   border-width: 1px;
   border-style: solid;
   border-color: #ccc;
   background-color: #ccc;
 }


 /* for quick table tags with: || 
 */
  td.quick {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 11px;
   background-color: #eef;
   padding: 5px;
 }

 
 /* links in general, if not overwritten in other divs
 a:hover {
   text-decoration: none;
   background-color: #transparent;
 }

 /* for  spec */
 img {

 }

 /* line separator */
 hr {
   margin-top: 10px;
   border: 0px;
   border-top: 1px #ddd solid;
 } 

 /* style of the text edit area and text 
    entry for search and passwords 
 */
 .textarea {
   font-family: courier, helvetica, verdana,arial,sans-serif;
   left-margin: 20px;
   font-size: 12px;
   background-color: #eee;
}

 /* buttons for save and search */
 .button {
 }

 /* example for custom style in  or  */
 .mybox { border: 1px #ccc dashed; }

 /* other custom styles used */

 .smallred { font-size: 10px; font-weight: normal; color: #a22; }

 .mediumred { font-size: 12px; font-weight: normal; color: #a22; }

-->

-->
</style>
</head>

<body bgcolor="#AAAAAA">

<!-- content -->
<div class="content">
<h3> "The Y of Why" in newLISP </h3>
<br>
The task is to find a function <i>Y</i>, which can transform a recursive function into a function which is truly functional without side effects, no free variables and a <i>fixed point</i> property. The following is a version of <i>Richard P. Gabriel's</i> "The Why of Y" [1] modified for newLISP.<br>
<br>
<h3> Find Y </h3>
<br>
This is the original recursive definition for factorial <tt>fact</tt>:<br>
<br>
<tt>&nbsp;&nbsp;(define&nbsp;fact&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(fact&nbsp;(-&nbsp;n&nbsp;1))))))</tt><br>
<br>
The original factorial redefined as an anonymous function and taking the <i>true</i> factorial in h:<br>
<br>
<tt>&nbsp;&nbsp;(lambda&nbsp;(h)&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(h&nbsp;(-&nbsp;n&nbsp;1))))))</tt><br>
<br>
If this function is called <i>F</i> and the <i>true</i> factorial is <i>f</i>  then <i>((F f) n) = (F n)</i>, <i>f</i> is a <i>fixed point</i> of <i>F</i>.<br>
<br>
We are looking for a function <i>Y</i> with the property: <i>((F (Y F)) x) = ((Y F) x)</i><br>
<br>
This function is called the <i>Applicative-order Y fixed point operator</i> for functionals. To achieve this we transform the basic form of the factorial function:<br>
<br>
The basic factorial with <tt>h</tt> the <i>true</i> factorial:<br>
<br>
<tt>&nbsp;&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(h&nbsp;(-&nbsp;n&nbsp;1)))))</tt><br>
<br>
Pass <tt>h</tt> the factorial function as parameter:<br>
<br>
<tt>&nbsp;&nbsp;(lambda&nbsp;(h&nbsp;n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(h&nbsp;h&nbsp;(-&nbsp;n&nbsp;1)))))</tt><br>
<br>
Package as anonymous expression and try it out:<br>
<br>
<tt>&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h&nbsp;n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(h&nbsp;h&nbsp;(-&nbsp;n&nbsp;1)))))))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(g&nbsp;g&nbsp;10))&nbsp;;=&gt;&nbsp;3628800</tt><br>
<br>
Up to this point expressions are identical to those found in <i>Richard P. Gabriel's</i> "The Why of Y". The rest of the transformations follows <i>Gabriel's</i>, but inserts the newLISP function <tt>expand</tt> where required to achieve a closure effect for the function passed as a parameter into the <tt>(lambda (h) ...)</tt> expression.<br>
<br>
Curry <tt>(g g 10)</tt> to <tt>((g g) 10)</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;((h&nbsp;h)&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'h))))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((g&nbsp;g)&nbsp;10))</tt><br>
<br>
Abstract the <tt>(h h)</tt> out as <tt>f</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(let&nbsp;((f&nbsp;(lambda&nbsp;(f&nbsp;n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(f&nbsp;(-&nbsp;n&nbsp;1)))))))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(f&nbsp;(h&nbsp;h)&nbsp;n)))&nbsp;'h))))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((g&nbsp;g)&nbsp;10))&nbsp;</tt><br>
<br>
Curry definition of <tt>f</tt> for <tt>f</tt> in <tt>(lambda (f n) ...)</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(let&nbsp;((f&nbsp;(lambda&nbsp;(q)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q)&nbsp;)))&nbsp;;&nbsp;in&nbsp;Scheme</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((f&nbsp;(h&nbsp;h))&nbsp;n)))&nbsp;'h))))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;((g&nbsp;g)&nbsp;10))&nbsp;</tt><br>
<br>
Refactor to bring <tt>f</tt> to the top:<br>
<br>
<tt>&nbsp;&nbsp;(let&nbsp;((f&nbsp;(lambda&nbsp;(q)&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q))))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;((f&nbsp;(h&nbsp;h))&nbsp;n))&nbsp;'h))))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((g&nbsp;g)&nbsp;10)))</tt><br>
<br>
<h3> The Y function </h3>
<br>
Now define <tt>Y</tt> as doing the correct expansion and substitution of <tt>h</tt> and <tt>f</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(define&nbsp;Y&nbsp;(lambda&nbsp;(f)&nbsp;(expand&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(let&nbsp;((g&nbsp;(lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;((f&nbsp;(h&nbsp;h))&nbsp;x))&nbsp;'h))))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(g&nbsp;g))&nbsp;'f)))</tt><br>
<br>
Avoiding the <tt>let</tt> and writing out the <tt>(g g)</tt> expression yields:<br>
<b><br>
<tt>&nbsp;&nbsp;(define&nbsp;&nbsp;Y&nbsp;(lambda&nbsp;(f)&nbsp;(expand</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;((f&nbsp;(h&nbsp;h))&nbsp;x))&nbsp;'h))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;((f&nbsp;(h&nbsp;h))&nbsp;x))&nbsp;'h)))&nbsp;'f))&nbsp;)</tt><br>
</b><br>
newLISP needs to <tt>expand</tt> to get closure effect for the passed procedure <tt>q</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(define&nbsp;f&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(q)&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q)))</tt><br>
<br>
<tt>&nbsp;&nbsp;((Y&nbsp;f)&nbsp;10)&nbsp;;=&gt;&nbsp;3628800</tt><br>
<br>
Show the fixed point property:<br>
<b><br>
<tt>&nbsp;&nbsp;(=&nbsp;((Y&nbsp;f)&nbsp;10)&nbsp;((f&nbsp;(Y&nbsp;f))&nbsp;10)&nbsp;)&nbsp;;=&gt;&nbsp;true&nbsp;</tt><br>
</b><br>
<tt>&nbsp;&nbsp;((f&nbsp;(Y&nbsp;f))&nbsp;10)&nbsp;;=&gt;&nbsp;3628800</tt><br>
<br>
<tt>&nbsp;&nbsp;((f&nbsp;(f&nbsp;(Y&nbsp;f)))&nbsp;10)&nbsp;;=&gt;&nbsp;3628800</tt><br>
<br>
The return value of <tt>(Y f)</tt> shows that <tt>(Y f)</tt> is pure functional, without any side effects and no free variables:<br>
<br>
<tt>&nbsp;&nbsp;(lambda&nbsp;(x)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;(((lambda&nbsp;(q)&nbsp;(expand&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;((lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;(((lambda&nbsp;(q)&nbsp;(expand&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q))&nbsp;(h&nbsp;h))&nbsp;x))&nbsp;'h))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(h)&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;(((lambda&nbsp;(q)&nbsp;(expand&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(n)&nbsp;(if&nbsp;(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(*&nbsp;n&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1)))))&nbsp;'q))&nbsp;(h&nbsp;h))&nbsp;x))&nbsp;'h))))&nbsp;x))</tt><br>
<br>
Check another recursive function <tt>fibo</tt> :<br>
<br>
<tt>&nbsp;&nbsp;(define&nbsp;f&nbsp;(lambda&nbsp;(q)&nbsp;(expand&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda(n)&nbsp;(if(&lt;&nbsp;n&nbsp;2)&nbsp;1&nbsp;(+&nbsp;&nbsp;(q&nbsp;(-&nbsp;n&nbsp;1))&nbsp;(q&nbsp;(-&nbsp;n&nbsp;2)))))&nbsp;'q))&nbsp;)</tt><br>
<br>
<tt>&nbsp;&nbsp;(define&nbsp;fibo&nbsp;(Y&nbsp;f))&nbsp;</tt><br>
<tt></tt><br>
<tt>&nbsp;&nbsp;(fibo&nbsp;10)&nbsp;;=&gt;&nbsp;89</tt><br>
<br>
<center>&#167;</center>
<br>
[1] The Why of Y   <br>
Richard P. Gabriel - 2001<br>
<a href="http://www.dreamsongs.com/NewFiles/WhyOfY.pdf">http://www.dreamsongs.com/NewFiles/WhyOfY.pdf</a>  <br>
<br>
<center>&#167;</center>
<h3> Notes </h3>
<a href="http://www.newlisp.org/syntax.cgi?code/lambda-lsp.txt">Lambda calculus in newLISP</a>  based on redefinition of <i>Lambda</i> - <tt>expand</tt> expands uppercase variables - :<br>
<tt></tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(define-macro&nbsp;(LAMBDA)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(append&nbsp;(lambda&nbsp;)&nbsp;(expand&nbsp;(args))))</tt><br>
<br>
<br>
See <a href="http://mvanier.livejournal.com/2897.html">Mike Vanier's site</a>  for a slightly different version of <em>Y</em> but with identical functionally.<br>
<br>
A derivation of the Y-Combinator in JavaScript: <a href="http://igstan.ro/posts/2010-12-01-deriving-the-y-combinator-in-7-easy-steps.html">Deriving the Y Combinator in 7 Easy Steps</a>  (added 2010-12-05) <br><br>
<br>
<center>&#167;</center>

</div>

<!-- end content -->

<!-- comments -->

<!-- end comments -->
<!-- the menu -->

<!-- the menu end -->

<!-- copyright -->
  <div class="footer" align="center">
  <br>
Copyright &copy; 2021, Lutz Mueller. All rights reserved.<br>
 
  <a href="http://www.newlisp.net/">Site</a> powered by <a href="http://newlisp.net">newLISP</a> wiki v4.6
<!--
  in 6ms
-->
<br>
  </div>
<!-- end copyright -->

<!-- <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1098066-1";
urchinTracker();
</script> -->

</body>
</html>

