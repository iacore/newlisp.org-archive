<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>



<head>
  <title>newLISP  - Closures</title>
  <META name="verify-v1" content="uI5QBi0dvEoNnrT+Vrm63toHH4Ep1y6BBR61veuiWKU=" />
  <META http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="icon" href="favicon.ico" type="image/x-icon" />
  <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.cgi" />
  <meta name="description"`
      content="newLISP is a general purpose scripting language for developing web applications and programs in general in the domains of artificial intelligence (AI), statistics and machine learning.">
  <meta name="keywords"
      content="lisp,scheme,programming,scripting language,ai,artificial intelligence,statistics,machine learning,distributed and parallel processing,gpl">
  <META name="verify-v1" content="uI5QBi0dvEoNnrT+Vrm63toHH4Ep1y6BBR61veuiWKU=" />
  <style type="text/css" media="screen">
<!--
 
 /* style for top title portion of site */

 .title {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 20px;
   font-weight: 200;
   margin: 0 10%;
   margin-bottom: 3px;
   color: #888;
  background-color: #FFFFFF;
 }

 /* link behaviour in title box */
 .title a {
   background-color: transparent;
   text-decoration: none;
   color: #eee;
   text-decoration: none;
 }

 .title a:hover {
   color: #fff;
   text-decoration: underline;
   background-color: transparent;
 }

 /* the name on top of each page (except the Home page) */

 .pagename {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 18px;
   margin-bottom: 20px;
 }

 /* style of content box where all 
   user text lives 
 */
 .content {
   margin: 0 10%;
   max-width: 900px;
   padding: 10px;
  background-color: #FFFFFF;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";

  -moz-border-radius: 5px;
  -khtml-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
 }

 .content a {
   background-color: transparent;
   text-decoration: none;
   color: #25a;
 }

 .content a:hover {
   padding: 0px;
   color: #FFF;
   text-decoration: none;
   background-color: #888;
 }

 .content a:visited {

 }


 /* style for menu on top */
 .menu {   
   margin-left: 0px;
   margin-right: 0px;
   padding: 1px;
   font-family: Verdana, Arial, Helvetica, sans-serif;
   font-size: 16px;
   line-height: 16px;
   color: #FFF;
   background-color: #369;
 }

 /* links in menu */
 .menu a {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 0px;
   color: #fff;
   text-decoration: none;
 }


 .menu a:hover {
   color: #fff;
   border-bottom: 0px;
   padding: 0px;
   background-color: #888;
   text-decoration: none;
 }

 .menu a:visited {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }

 .menu-bottom {   
   margin: 0 10%;
   max-width: 880px;
   margin-top: 10px;
   padding: 1px;
   font-family: Verdanan, Arial, Helvetica, sans-serif;
   font-size: 15px;
   background-color: #369;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";

  -moz-border-radius: 5px;
  -khtml-border-radius: 5px;
  -webkit-border-radius: 5px;
  border-radius: 5px;
 }

 /* links in menu-bottom */
 .menu-bottom a {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }


 .menu-bottom a:hover {
   color: #fff;
   border-bottom: 0px;
   padding: 1px;
   background-color: #888;
   text-decoration: none;
 }

 .menu-bottom a:visited {
   border: 0px #555 solid;
   border-bottom: 0px;
   padding: 1px;
   color: #fff;
   text-decoration: none;
 }

 /* the bottom bar between content box and menu */
 .bottombar {
   font-size: 4px;
   margin: 0 10%;
   padding: 10px;
   padding-top: 2px;
   padding-bottom: 6px;
  background-color: #FFFFFF;
  /* offset left, top, thickness, color with alpha */
  -webkit-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  -moz-box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.5);
  /* IE */
  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray');
  /* slightly different syntax for IE8 */
  -ms-filter:"progid:DXImageTransform.Microsoft.dropshadow(OffX=5, OffY=5, Color='gray')";
 }


 /* where the copyright notice is */
 .footer {
   text-align: center;
   margin: 0 10%;
   max-width: 880px;
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 10px;
   line-height: 12px;
 }


 /* style for whole site except overwritten
     by enclosed tags
 */
 body {
   font-family: Geneva, Helvetica, Verdanan, Arial, sans-serif;
   font-size: 16px;
   line-height: 20px;
   color: #606060;
 }


 /* style for == title == */
 h1 {
   font-family: Helvetica;
   font-size: 32px;
   color: #369;
   font-weight: 100;
 }

 /* style for === title === */
 h2 {
   font-family: Helvetica;
   font-size: 30px;
   font-weight: 100;
   color: #369;
 }

 /* style for ==== title ==== */
 h3 {
   font-size: 20px;
   font-weight: 100;
   color: #369;
   margin-top: 20px;
   padding: 0px;
 }

 /* style for ===== text =====  used for blog title */
 h4 {
   font-size: 18px;
   font-weight: 100;
   color: #777;
   margin: 0px;
   padding: 0px;
}

 /* style for ====== text ======  used for comment title */
 h5 {
   font-size: 12px;
   font-weight: normal;
   color: #a22;
   margin: 3px;
   padding: 0px;
 }

 /* for <small> tag */
 small {
   font-size: 10px;
 }


 /* for the bold tag */
 b {
  color: 999;
 }

 /* for <big> tag, will not work on Netscape v.4 */
 big {
 }

 /* for <p> tag */
 p {
   margin-left: 40px;
   margin-right: 40px;
 }

 /* for <table> tag, these are used when displating the files,changes,referencrs tables */
 table {
   border-width: 1px;
   border-style: solid;
   border-color: #ccc;
   background-color: #ccc;
 }

 /* for table tags <tr> <th> <td> */
 tr, th, td {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 12px;
   background-color: #eee;
 }

 /* for quick table tags with [,] 
     use these (not <table><tr><td>)
     when doing layout with tables
 */
 table.quick {
   border-width: 1px;
   border-style: solid;
   border-color: #ccc;
   background-color: #ccc;
 }


 /* for quick table tags with: || 
 */
  td.quick {
   font-family: Helvetica, Verdanan, Arial, sans-serif;
   font-size: 11px;
   background-color: #eef;
   padding: 5px;
 }

 
 /* links in general, if not overwritten in other divs
 a:hover {
   text-decoration: none;
   background-color: #transparent;
 }

 /* for  spec */
 img {

 }

 /* line separator */
 hr {
   margin-top: 10px;
   border: 0px;
   border-top: 1px #ddd solid;
 } 

 /* style of the text edit area and text 
    entry for search and passwords 
 */
 .textarea {
   font-family: courier, helvetica, verdana,arial,sans-serif;
   left-margin: 20px;
   font-size: 12px;
   background-color: #eee;
}

 /* buttons for save and search */
 .button {
 }

 /* example for custom style in  or  */
 .mybox { border: 1px #ccc dashed; }

 /* other custom styles used */

 .smallred { font-size: 10px; font-weight: normal; color: #a22; }

 .mediumred { font-size: 12px; font-weight: normal; color: #a22; }

-->

-->
</style>
</head>

<body bgcolor="#AAAAAA">

<!-- content -->
<div class="content">
<center> <div class="title">puts the fun <a href="index.cgi"><img src="images/newLISP-icon-86.jpg" alt="newLISP button" order="0" border="0"/></a>  back in Lisp</div><div class="menu"><a href="index.cgi?Home">Home</a>  &#183; <a href="index.cgi?FAQ">About</a>  &#183; <a href="index.cgi?Downloads">Downloads</a>  &#183; <a href="index.cgi?Documentation">Docs</a>  &#183; <a href="modules/"> Modules</a>  &#183; <a href="index.cgi?Code_Contributions">Links</a>  &#183; <a href="index.cgi?Tips_and_Tricks">Tips&amp;Tricks</a>  &#183; <a href="index.cgi?Libraries">C-Libs</a>  &#183; <a href="index.cgi?Applications">Apps</a>  &#183; <a href="index.cgi?Art">Art</a>  &#183; <a href="http://newlispfanclub.com">Forum</a>  </div></center>
<br>
<h2> Closures, Contexts and Stateful Functions</h2>
<br>
Scheme uses <i>closures</i> to write function factories, functions with state and software objects. newLISP uses variable expansion and namespaces called <i>contexts</i> to do the same. <br>
<br>
newLISP namespaces are always open to inspection. They are first class objects which can be copied and passed as parameters to built-in newLISP primitives or user-defined lambda functions.<br>
<br>
A newLISP context can contain several functions at the same time. This is used to build software <a href="modules/">modules</a>  in newLISP.<br>
<br>
Like a Scheme closure a newLISP context is a lexically closed space. In newLISP inside that namespace scoping is dynamic. newLISP allows mixing lexical and dynamic scoping in a flexible way.<br>
<br>
<h3> Function factories </h3>
The first is a simple example of a function factory. The function makes an adder function for a specific number to add. While Scheme uses a function closure to capture the number in a static variable, newLISP uses an <tt>expand</tt> function to create a specific lambda function containing the number as a constant:<br>
<blockquote><br>
<tt>;&nbsp;Scheme&nbsp;closure</tt><br>
<br>
<tt>(define&nbsp;make-adder&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(n)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;(x)&nbsp;(+&nbsp;x&nbsp;n))))</tt><br>
<br>
<tt>(define&nbsp;add3&nbsp;(make-adder&nbsp;3))&nbsp;=&gt;&nbsp;#&lt;procedure&nbsp;add3&gt;</tt><br>
<br>
<tt>(add3&nbsp;10)&nbsp;=&gt;&nbsp;13</tt><br>
</blockquote>
<br>
newLISP uses either <tt>expand</tt> or <tt>letex</tt> to make <tt>n</tt> part of the lambda expression as a constant, or it uses curry:<br>
<blockquote><br>
<tt>;&nbsp;newLISP&nbsp;using&nbsp;expand</tt><br>
<br>
<tt>(define&nbsp;(make-adder&nbsp;n)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(expand&nbsp;(lambda&nbsp;(x)&nbsp;(+&nbsp;x&nbsp;n))&nbsp;'n))</tt><br>
<br>
<tt>(define&nbsp;add3&nbsp;(make-adder&nbsp;3))</tt><br>
<br>
<tt>(add3&nbsp;10)&nbsp;=&gt;&nbsp;13</tt><br>
<br>
<tt></tt><br>
<tt>;&nbsp;newLISP&nbsp;using&nbsp;letex</tt><br>
<br>
<tt>(define&nbsp;(make-adder&nbsp;n)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(letex&nbsp;(c&nbsp;n)&nbsp;(lambda&nbsp;(x)&nbsp;(+&nbsp;x&nbsp;c))))</tt><br>
<br>
<tt>;&nbsp;or&nbsp;letex&nbsp;on&nbsp;same&nbsp;symbol</tt><br>
<br>
<tt>(define&nbsp;(make-adder&nbsp;n)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(letex&nbsp;(n&nbsp;n)&nbsp;(lambda&nbsp;(x)&nbsp;(+&nbsp;x&nbsp;n))))</tt><br>
<br>
<tt>(define&nbsp;add3&nbsp;(make-adder&nbsp;3))</tt><br>
<br>
<tt>(add3&nbsp;10)&nbsp;=&gt;&nbsp;13</tt><br>
<tt></tt><br>
<br>
<tt>;&nbsp;newLISP&nbsp;using&nbsp;curry</tt><br>
<br>
<tt>(define&nbsp;add3&nbsp;(curry&nbsp;+&nbsp;3))</tt><br>
<br>
<tt>(add3&nbsp;10)&nbsp;=&gt;&nbsp;13</tt><br>
</blockquote>
<br>
In either case we create a lambda expression with the <tt>3</tt> contained as a constant. <br>
<br>
<h3> Functions with memory </h3>
The next example uses a closure to write a generator function. It produces a different result each time it is called and remembers an internal state: <br>
<blockquote><br>
<tt>;&nbsp;Scheme&nbsp;generator</tt><br>
<br>
<tt>(define&nbsp;gen&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(let&nbsp;((acc&nbsp;0))&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;()&nbsp;(set!&nbsp;acc&nbsp;(+&nbsp;acc&nbsp;1)))))</tt><br>
<br>
<tt>(gen)&nbsp;=&gt;&nbsp;1</tt><br>
<tt>(gen)&nbsp;=&gt;&nbsp;2</tt><br>
</blockquote>
<br>
In newLISP we create local state variables using a name-space context:<br>
<blockquote><br>
<tt>;&nbsp;newLISP&nbsp;generator</tt><br>
<br>
<tt>(define&nbsp;(gen:gen)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;(setq&nbsp;gen:sum&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;gen:sum&nbsp;(inc&nbsp;gen:sum)&nbsp;1)))</tt><br>
<br>
<tt>;&nbsp;this&nbsp;could&nbsp;be&nbsp;written&nbsp;even&nbsp;shorter,&nbsp;because</tt><br>
<tt>;&nbsp;'inc'&nbsp;treats&nbsp;nil&nbsp;as&nbsp;zero</tt><br>
<br>
<tt>(define&nbsp;(gen:gen)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(inc&nbsp;gen:sum))</tt><br>
<br>
<tt>(gen)&nbsp;=&gt;&nbsp;1</tt><br>
<tt>(gen)&nbsp;=&gt;&nbsp;2</tt><br>
</blockquote>
<br>
When writing <tt>gen:gen</tt>, a context called <tt>gen</tt> is created. <tt>gen</tt> is a lexical name-space containing its own symbols used as variables and functions. In this case the name-space <tt>gen</tt> has the variables <tt>gen</tt> and <tt>sum</tt>. <br>
<br>
The first symbol <tt>gen</tt> has the same name as the parent context <tt>gen</tt>. This type of symbol is called a <i>default functor</i> in newLISP. <br>
<br>
When using a context name in place of a function name, then newLISP assumes the default functor. We can call our generator function using <tt>(gen)</tt>. It is not necessary to call the function using <tt>(gen:gen)</tt>,  <tt>(gen)</tt> will <i>default</i> to <tt>(gen:gen)</tt>.<br>
<br>
&#149; Watch the movie <a href="http://nuevatec.nfshost.com/ShellGames/1-shell-games-number-generators.mov">here</a>. <br>
<br>
&#149; Create a function <a href="index.cgi?page=def-static">def-static</a>  to automate the process of defining lexically scoped functions. <br>
<br>
<h3> Introspection </h3>
In newLISP the inner state of a function can always be queried. In Scheme the state of a closure is hidden and not open to introspection without extra code:<br>
<blockquote><br>
<tt>;&nbsp;in&nbsp;Scheme&nbsp;states&nbsp;are&nbsp;hidden</tt><br>
<br>
<tt>add3&nbsp;#&lt;procedure&nbsp;add3&gt;</tt><br>
<br>
<tt>gen&nbsp;=&gt;&nbsp;#&lt;procedure&nbsp;gen&gt;</tt><br>
<br>
<br>
<tt>;&nbsp;in&nbsp;newLISP&nbsp;states&nbsp;are&nbsp;visible</tt><br>
<br>
<tt>add3&nbsp;=&gt;&nbsp;(lambda&nbsp;(x)&nbsp;(+&nbsp;x&nbsp;3))</tt><br>
<br>
<tt>gen:sum&nbsp;=&gt;&nbsp;2</tt><br>
<br>
<tt>gen:gen&nbsp;=&gt;&nbsp;(lambda&nbsp;()&nbsp;(inc&nbsp;gen:sum))</tt><br>
</blockquote>
<br>
In Scheme lambda closure is hidden from inspection, once they are evaluated and assigned.<br>
<br>
<h3> Functions in newLISP are first class lists </h3>
<blockquote><br>
<tt>(define&nbsp;(double&nbsp;x)&nbsp;(+&nbsp;x&nbsp;x)))</tt><br>
<tt>(setf&nbsp;(nth&nbsp;1&nbsp;double)&nbsp;'(mul&nbsp;2&nbsp;x))</tt><br>
<br>
<tt>double&nbsp;=&gt;&nbsp;(lambda&nbsp;(x)&nbsp;(mul&nbsp;2&nbsp;x))</tt><br>
</blockquote>
<br>
The first class nature of lambda expressions in newLISP make it possible to write self modifying code.<br>
<br>
<h3> Stateful functions using in-place modification </h3>
<blockquote><br>
<tt>;;&nbsp;sum&nbsp;accumulator</tt><br>
<tt>(define&nbsp;(sum&nbsp;(x&nbsp;0))&nbsp;(inc&nbsp;0&nbsp;x))</tt><br>
<br>
<tt>(sum&nbsp;1)&nbsp;;=&gt;&nbsp;1</tt><br>
<tt>(sum&nbsp;2)&nbsp;;=&gt;&nbsp;3</tt><br>
<br>
<tt>sum&nbsp;;=&gt;&nbsp;(lambda&nbsp;((x&nbsp;0))&nbsp;(inc&nbsp;3&nbsp;x))</tt><br>
<br>
<tt>;;&nbsp;self&nbsp;incremeneter</tt><br>
<tt>(define&nbsp;(incre)&nbsp;(inc&nbsp;0))</tt><br>
<br>
<tt>(incre)&nbsp;;=&gt;&nbsp;1&nbsp;</tt><br>
<tt>(incre)&nbsp;;=&gt;&nbsp;2</tt><br>
<tt>(incre)&nbsp;;=&gt;&nbsp;3</tt><br>
<br>
<tt>incre&nbsp;;=&gt;&nbsp;(lambda&nbsp;()&nbsp;(inc&nbsp;3)</tt><br>
<br>
<tt>;;&nbsp;make&nbsp;stream&nbsp;function&nbsp;with&nbsp;expansion&nbsp;closure</tt><br>
<br>
<tt>(define&nbsp;(make-stream&nbsp;lst)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(letex&nbsp;(stream&nbsp;lst)&nbsp;</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;()&nbsp;(pop&nbsp;'stream))))</tt><br>
<br>
<tt>(set&nbsp;'lst&nbsp;'(a&nbsp;b&nbsp;c&nbsp;d&nbsp;e&nbsp;f&nbsp;g&nbsp;h))</tt><br>
<tt>(define&nbsp;mystream&nbsp;(make-stream&nbsp;lst))</tt><br>
<br>
<tt>(mystream)&nbsp;;=&gt;&nbsp;a</tt><br>
<tt>(mystream)&nbsp;;=&gt;&nbsp;b</tt><br>
<tt>(mystream)&nbsp;;=&gt;&nbsp;c</tt><br>
<br>
<tt>(set&nbsp;'str&nbsp;"abcddefgh")</tt><br>
<tt>(define&nbsp;mystream&nbsp;(make-stream&nbsp;str))</tt><br>
<br>
<tt>(mystream)&nbsp;;=&gt;&nbsp;"a"</tt><br>
<tt>(mystream)&nbsp;;=&gt;&nbsp;"c"</tt><br>
</blockquote>
<br>
Another interesting self modifying pattern was shown by <i>Kazimir Majorinc</i> from <a href="http://kazimirmajorinc.com/">http://kazimirmajorinc.com</a>:<br>
<blockquote><br>
<tt>(define&nbsp;(f)</tt><br>
<tt>&nbsp;&nbsp;(begin</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(println&nbsp;(inc&nbsp;cnt))</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(push&nbsp;(last&nbsp;f)&nbsp;f&nbsp;-1)</tt><br>
<tt>&nbsp;&nbsp;&nbsp;&nbsp;(if&nbsp;(&gt;&nbsp;(length&nbsp;f)&nbsp;3)&nbsp;(pop&nbsp;f&nbsp;1))))</tt><br>
</blockquote>
The pattern called <i>crawler-tractor</i> will run forever without using iteration or recursion. New code to be executed is copied from old code and appended to the end of the function. Old executed code is popped of from the beginning of the function. Se also <a href="http://kazimirmajorinc.com/Documents/Crawler-tractor/index.html">here</a>.<br>
<br>
The ability to write self modifying  functions is unique to newLISP.<br>
<br>

</div>

<!-- end content -->

<!-- comments -->

<!-- end comments -->
<!-- the menu -->

<!-- the menu end -->

<!-- copyright -->
  <div class="footer" align="center">
  <br>
Copyright &copy; 2021, Lutz Mueller. All rights reserved.<br>
 
  <a href="http://www.newlisp.net/">Site</a> powered by <a href="http://newlisp.net">newLISP</a> wiki v4.6
<!--
  in 7ms
-->
<br>
  </div>
<!-- end copyright -->

<!-- <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-1098066-1";
urchinTracker();
</script> -->

</body>
</html>

